{
  "name": "caterpillar",
  "version": "2.0.3",
  "description": "Caterpillar is the ultimate logging system for Node.js, based on transform streams you can log to it and pipe the output off to different locations, including some pre-made ones. Caterpillar also supports log levels according to the RFC standard, as well as line, method, and file fetching for messages. You can even use it in web browsers with caterpillar-browser.",
  "homepage": "https://github.com/bevry/caterpillar",
  "keywords": [
    "caterpillar",
    "console",
    "log",
    "logger",
    "logging",
    "debug",
    "stream",
    "transform"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/caterpillar/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/caterpillar.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "extendr": "~2.0.1",
    "readable-stream": "~1.0.2"
  },
  "devDependencies": {
    "caterpillar-filter": "2.x",
    "caterpillar-human": "2.x",
    "coffee-script": "~1.6.2",
    "joe": "~1.2.0",
    "joe-reporter-console": "~1.2.1",
    "chai": "~1.5.0"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/caterpillar-test.js"
  },
  "main": "./out/lib/caterpillar.js",
  "readme": "# Caterpillar\n\n[![Build Status](https://secure.travis-ci.org/bevry/caterpillar.png?branch=master)](http://travis-ci.org/bevry/caterpillar)\n[![NPM version](https://badge.fury.io/js/caterpillar.png)](https://npmjs.org/package/caterpillar)\n[![Flattr this project](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr)\n\nCaterpillar is the ultimate logging system for Node.js, based on [transform streams](http://nodejs.org/api/stream.html#stream_class_stream_transform) you can log to it and pipe the output off to different locations, including [some pre-made ones](http://npmjs.org/keyword/caterpillar-transform). Caterpillar also supports log levels according to the [RFC standard](http://www.faqs.org/rfcs/rfc3164.html), as well as line, method, and file fetching for messages. You can even use it in web browsers with the [Browser Transform](https://github.com/bevry/caterpillar-browser).\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save caterpillar`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example with the [Filter](https://github.com/bevry/caterpillar-filter) and [Human](https://github.com/bevry/caterpillar-filter) transforms\n\n``` javascript\n// Import\nvar level  = process.argv.indexOf('-d') === -1 ? 6 : 7;\nvar logger = new (require('./').Logger)({level:level});\nvar filter = new (require('caterpillar-filter').Filter)();\nvar human  = new (require('caterpillar-human').Human)();\n\n// Pipe logger output to filter, then filter output to stdout\nlogger.pipe(filter).pipe(human).pipe(process.stdout);\n\n// If we are debugging, then write the original logger data to debug.log\nif ( level === 7 ) {\n\tlogger.pipe(require('fs').createWriteStream('./debug.log'));\n}\n\n// Log messages\nlogger.log('emergency', 'this is level 0');\nlogger.log('emerg', 'this is level 0');\nlogger.log('alert', 'this is level 1');\nlogger.log('critical', 'this is level 2');\nlogger.log('crit', 'this is level 2');\nlogger.log('error', 'this is level 3');\nlogger.log('err', 'this is level 3');\nlogger.log('warning', 'this is level 4');\nlogger.log('warn', 'this is level 4');\nlogger.log('notice', 'this is level 5');\nlogger.log('note', 'this is level 5');\nlogger.log('info', 'this is level 6');\nlogger.log('default', 'this is level 6');\nlogger.log('debug', 'this is level 7');\nlogger.log('this is level 6, the default level');\nlogger.log('you','can','also','use','as','many','arguments','as','you','want',1,[2,3],{four:5});\n```\n\nResult with log level 6 (info):\n\n<img src=\"https://github.com/bevry/caterpillar/raw/master/media/caterpillar-normal.png\"/>\n\n\nResult with log level 7 (debug):\n\n<img src=\"https://github.com/bevry/caterpillar/raw/master/media/caterpillar-debug.png\"/>\n\n\n### Transform API, extends [stream.Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform)\n\n``` javascript\nnew (require('caterpillar').Transform)(config)\n```\n\n- Methods\n\t- `constructor(config?)` create our new instance with the config, config is optional\n\t- `pipe(child)` pipe our stream to the child, also sync our config to it\n\t- `setConfig(config)` set the configuration and emit the `config` event\n\t- `getConfig()` get the configuration\n\t- `format(entry)` format the caterpillar logger entry\n- Configuration\n\t- none by default\n- Events\n\t- `config(config)` emitted once our configuration has updated\n\n\n### Logger API, extends Transform API\n\n``` javascript\nnew (require('caterpillar').Logger)(config)\n```\n\n- Methods\n\t- `constructor(config?)` create our new instance with the config, config is optional\n\t- `log(args...)` write a log message, the first argument is suppose to be the level (will use the default level if it isn't)\n\t- `format(level, args...)` create a log entry ready for writing to the logger stream, output is as follows:\n\n\t\t``` javascript\n\t\t{\n\t\t\t\"args\": [\"this is emergency and is level 0\"],\n\t\t\t\"date\": \"2013-04-25T10:18:25.722Z\",\n\t\t\t\"levelNumber\": 0,\n\t\t\t\"levelName\": \"emergency\",\n\t\t\t\"line\": \"59\",\n\t\t\t\"method\": \"Task.fn\",\n\t\t\t\"file\": \"/Users/balupton/Projects/caterpillar/out/test/caterpillar-test.js\"\n\t\t}\n\t\t```\n\n\t- `getLevelNumber(name)` get the level number for the level name\n\t- `getLevelName(number)` get the level name for the level number\n\t- `getLevelInfo(nameOrNumber)` get the level name and number for either a level name or number\n\t- `getLineInfo()` get the file, method, and line that the `log` method was called on\n\n- Configuration\n\t- `levels` the level names and their associated number, also includes `default` for when no level was specified, defaults to:\n\t\n\t\t``` javascript\n\t\t{\n\t\t\temergency: 0,\n\t\t\talert: 1,\n\t\t\tcritical: 2,\n\t\t\terror: 3,\n\t\t\twarning: 4,\n\t\t\tnotice: 5,\n\t\t\tinfo: 6,\n\t\t\tdebug: 7,\n\n\t\t\temerg: 0,\n\t\t\tcrit: 2,\n\t\t\terr: 3,\n\t\t\twarn: 4,\n\t\t\tnote: 5,\n\n\t\t\tdefault: 6\n\t\t}\n\t\t```\n\n- Events\n\t- only those inherited\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/caterpillar/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright &copy; 2012+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright &copy; 2011 [Benjamin Lupton](http://balupton.com)\n\n\n\n## Thanks\nUses the following:\n\n- [RFC3164](http://www.faqs.org/rfcs/rfc3164.html) for the level codes and names\n\nInspired by the following:\n\n- [Alexander Dorofeev's](https://github.com/akaspin) [AIN](https://github.com/akaspin/ain)\n- [TJ Holowaychuk's](https://github.com/visionmedia) [Log.js](https://github.com/visionmedia/log.js)\n- [Igor Urminƒçek's](https://github.com/igo) [NLogger](https://github.com/igo/nlogger)\n- [SchizoDuckie's](https://github.com/SchizoDuckie) [Node-CLI](https://github.com/SchizoDuckie/Node-CLI/)\n",
  "readmeFilename": "README.md",
  "_id": "caterpillar@2.0.3",
  "_from": "caterpillar@~2.0.1"
}
