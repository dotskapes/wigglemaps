// Generated by CoffeeScript 1.6.2
var Filter, Human, cliColor, create, err, extendr, stream, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

extendr = require('extendr');

stream = require('stream');

util = require('util');

try {
  cliColor = require('cli-color');
} catch (_error) {
  err = _error;
  cliColor = null;
}

Human = (function(_super) {
  __extends(Human, _super);

  Human.prototype.config = {
    colors: {
      0: 'red',
      1: 'red',
      2: 'red',
      3: 'red',
      4: 'yellow',
      5: 'yellow',
      6: 'green',
      7: 'green'
    }
  };

  function Human(opts) {
    this.format = __bind(this.format, this);
    this._transform = __bind(this._transform, this);
    this.setConfig = __bind(this.setConfig, this);    this.setConfig(opts);
    Human.__super__.constructor.apply(this, arguments);
  }

  Human.prototype.pipe = function(child) {
    if (typeof child.setConfig === "function" ? child.setConfig(this.config) : void 0) {
      this.on('config', child.setConfig);
    }
    return Human.__super__.pipe.apply(this, arguments);
  };

  Human.prototype.setConfig = function(opts) {
    this.config = extendr.deepExtend({}, this.config, opts);
    return this;
  };

  Human.prototype.getConfig = function() {
    return this.config;
  };

  Human.prototype._transform = function(chunk, encoding, next) {
    var entry, message;

    entry = JSON.parse(chunk.toString());
    message = this.format(entry);
    return next(null, message);
  };

  Human.prototype.getColor = function(levelCode) {
    var color;

    color = this.config.colors ? this.config.colors[levelCode] : false;
    return color;
  };

  Human.prototype.padLeft = function(padding, size, msg) {
    var i, _i, _ref;

    padding = String(padding);
    msg = String(msg);
    if (msg.length < size) {
      for (i = _i = 0, _ref = size - msg.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        msg = padding + msg;
      }
    }
    return msg;
  };

  Human.prototype.padRight = function(padding, size, msg) {
    var i, _i, _ref;

    padding = String(padding);
    msg = String(msg);
    if (msg.length < size) {
      for (i = _i = 0, _ref = size - msg.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        msg += padding;
      }
    }
    return msg;
  };

  Human.prototype.formatArguments = function(args) {
    var index, parts, text, value, _i, _len;

    parts = [];
    for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
      value = args[index];
      parts[index] = typeof value === 'string' ? value : util.inspect(value, false, 10);
    }
    text = parts.join(' ');
    return text;
  };

  Human.prototype.formatDate = function(now) {
    var date, hours, minutes, month, ms, result, seconds, year;

    now = new Date(now);
    year = now.getFullYear();
    month = this.padLeft('0', 2, now.getMonth() + 1);
    date = this.padLeft('0', 2, now.getDate());
    hours = this.padLeft('0', 2, now.getHours());
    minutes = this.padLeft('0', 2, now.getMinutes());
    seconds = this.padLeft('0', 2, now.getSeconds());
    ms = this.padLeft('0', 3, now.getMilliseconds());
    result = "" + year + "-" + month + "-" + date + " " + hours + ":" + minutes + ":" + seconds + "." + ms;
    return result;
  };

  Human.prototype.format = function(entry) {
    var colorFormatter, debugFormatter, debugString, levelName, messageFormatter, messageString, result, seperator;

    entry.color = this.getColor(entry.levelCode);
    entry.timestamp = this.formatDate(entry.date);
    entry.text = this.formatArguments(entry.args);
    result = null;
    if (entry.text) {
      colorFormatter = entry.color && (cliColor != null ? cliColor[entry.color] : void 0) || function(str) {
        return str;
      };
      debugFormatter = false;
      messageFormatter = colorFormatter && (cliColor != null ? cliColor.bold : void 0);
      levelName = colorFormatter(entry.levelName + ':');
      messageString = "" + levelName + " " + entry.text;
      if (messageFormatter) {
        messageString = messageFormatter(messageString);
      }
      if (this.config.level === 7) {
        seperator = '\n    â†’ ';
        debugString = "[" + entry.timestamp + "] [" + entry.file + ":" + entry.line + "] [" + entry.method + "]";
        if (debugFormatter) {
          debugString = lineFormatter(debugString);
        }
        result = "" + messageString + seperator + debugString + "\n";
      } else {
        result = messageString + '\n';
      }
    }
    return result;
  };

  return Human;

})(stream.Transform);

Filter = (function(_super) {
  __extends(Filter, _super);

  Filter.prototype.config = {
    level: 6
  };

  function Filter(opts) {
    this._transform = __bind(this._transform, this);
    this.setConfig = __bind(this.setConfig, this);    this.setConfig(opts);
    Filter.__super__.constructor.apply(this, arguments);
  }

  Filter.prototype.pipe = function(child) {
    if (typeof child.setConfig === "function" ? child.setConfig(this.config) : void 0) {
      this.on('config', child.setConfig);
    }
    return Filter.__super__.pipe.apply(this, arguments);
  };

  Filter.prototype.setConfig = function(opts) {
    this.config = extendr.deepExtend({}, this.config, opts);
    return this;
  };

  Filter.prototype.getConfig = function() {
    return this.config;
  };

  Filter.prototype._transform = function(chunk, encoding, next) {
    var entry, message;

    entry = JSON.parse(chunk.toString());
    message = this.format(entry);
    if (message) {
      message = JSON.stringify(message);
    }
    return next(null, message);
  };

  Filter.prototype.format = function(entry) {
    if (entry.levelCode > this.config.level) {
      return null;
    }
    return entry;
  };

  return Filter;

})(stream.Transform);

create = function(opts) {
  return new Human(opts);
};

module.exports = {
  cliColor: cliColor,
  Human: Human,
  Filter: Filter
};
