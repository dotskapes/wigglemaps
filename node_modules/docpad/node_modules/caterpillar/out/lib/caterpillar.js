// Generated by CoffeeScript 1.6.2
var Logger, Transform, extendr, stream, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

extendr = require('extendr');

stream = require('readable-stream');

Transform = (function(_super) {
  __extends(Transform, _super);

  Transform.prototype.config = null;

  function Transform(opts) {
    this._transform = __bind(this._transform, this);
    this.setConfig = __bind(this.setConfig, this);    this.config = extendr.deepClone(this.config);
    this.setConfig(opts);
    Transform.__super__.constructor.apply(this, arguments);
  }

  Transform.prototype.pipe = function(child) {
    if (typeof child.setConfig === "function" ? child.setConfig(this.config) : void 0) {
      this.on('config', child.setConfig);
    }
    return Transform.__super__.pipe.apply(this, arguments);
  };

  Transform.prototype.setConfig = function(opts) {
    extendr.deepExtend(this.config, opts);
    this.emit('config', this.config);
    return this;
  };

  Transform.prototype.getConfig = function() {
    return this.config;
  };

  Transform.prototype._transform = function(chunk, encoding, next) {
    var entry, message;

    entry = JSON.parse(chunk.toString());
    message = this.format(entry);
    if (message) {
      message = JSON.stringify(message);
    }
    return next(null, message);
  };

  Transform.prototype.format = function(entry) {
    return entry;
  };

  return Transform;

})(stream.Transform);

Logger = (function(_super) {
  __extends(Logger, _super);

  function Logger() {
    _ref = Logger.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Logger.prototype.config = {
    levels: {
      emergency: 0,
      alert: 1,
      critical: 2,
      error: 3,
      warning: 4,
      notice: 5,
      info: 6,
      debug: 7,
      emerg: 0,
      crit: 2,
      err: 3,
      warn: 4,
      note: 5,
      "default": 6
    }
  };

  Logger.prototype._transform = function(chunk, encoding, next) {
    return next(null, chunk);
  };

  Logger.prototype.getLevelNumber = function(name) {
    var _ref1;

    return (_ref1 = this.config.levels[name]) != null ? _ref1 : null;
  };

  Logger.prototype.getLevelName = function(number) {
    var key, value, _ref1;

    _ref1 = this.config.levels;
    for (key in _ref1) {
      if (!__hasProp.call(_ref1, key)) continue;
      value = _ref1[key];
      if (value === number) {
        return key;
      }
    }
    return null;
  };

  Logger.prototype.getLevelInfo = function(level) {
    var levelName, levelNumber, result;

    result = {
      levelNumber: null,
      levelName: null,
      defaulted: false
    };
    if (typeof level === 'number') {
      levelNumber = level;
      levelName = this.getLevelName(levelNumber);
    } else {
      levelName = level;
      levelNumber = this.getLevelNumber(levelName);
      levelName = this.getLevelName(levelNumber);
      if (levelNumber == null) {
        levelNumber = this.getLevelNumber('default');
        levelName = this.getLevelName(levelNumber);
        result.defaulted = true;
      }
    }
    result.levelNumber = levelNumber;
    result.levelName = levelName;
    return result;
  };

  Logger.prototype.getLineInfo = function() {
    var err, line, lines, parts, result, _i, _len;

    result = {
      line: -1,
      method: 'unknown',
      file: 'unknown'
    };
    err = new Error();
    lines = err.stack.split('\n');
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      if (line.indexOf(__dirname) !== -1 || line.indexOf(' at ') === -1) {
        continue;
      }
      parts = line.split(':');
      if (parts[0].indexOf('(') === -1) {
        result.method = 'unknown';
        result.file = parts[0].replace(/^.+?\s+at\s+/, '');
      } else {
        result.method = parts[0].replace(/^.+?\s+at\s+/, '').replace(/\s+\(.+$/, '');
        result.file = parts[0].replace(/^.+?\(/, '');
      }
      result.line = parts[1];
      break;
    }
    return result;
  };

  Logger.prototype.format = function() {
    var args, entry, level, levelInfo, lineInfo;

    level = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    entry = {};
    entry.date = new Date().toISOString();
    levelInfo = this.getLevelInfo(level);
    lineInfo = this.getLineInfo(level);
    if (levelInfo.defaulted && level !== 'default') {
      args.unshift(level);
    }
    delete levelInfo.defaulted;
    entry.args = args;
    extendr.extend(entry, levelInfo, lineInfo);
    return entry;
  };

  Logger.prototype.log = function() {
    var args, entry, entryString;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    entry = this.format.apply(this, args);
    entryString = JSON.stringify(entry);
    this.write(entryString);
    return this;
  };

  return Logger;

})(Transform);

module.exports = {
  Transform: Transform,
  Logger: Logger
};
