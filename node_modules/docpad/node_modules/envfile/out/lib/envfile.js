// Generated by CoffeeScript 1.6.2
var envfile, fsUtil,
  __hasProp = {}.hasOwnProperty;

fsUtil = require('fs');

envfile = {
  parseFile: function(filePath, opts, next) {
    var _this = this;

    if ((opts != null) === true && (next != null) === false) {
      next = opts;
      opts = null;
    }
    opts || (opts = {});
    fsUtil.readFile(filePath, function(err, data) {
      var dataStr;

      if (err) {
        return next(err);
      }
      dataStr = data.toString();
      return _this.parse(dataStr, opts, next);
    });
    return this;
  },
  parseFileSync: function(filePath, opts) {
    var data, dataStr, result;

    opts || (opts = {});
    data = fsUtil.readFileSync(filePath);
    if (data instanceof Error) {
      result = data;
    } else {
      dataStr = data.toString();
      result = this.parseSync(dataStr, opts);
    }
    return result;
  },
  parse: function(src, opts, next) {
    var _this = this;

    if ((opts != null) === true && (next != null) === false) {
      next = opts;
      opts = null;
    }
    opts || (opts = {});
    process.nextTick(function() {
      var result;

      result = _this.parseSync(src, opts);
      if (result instanceof Error) {
        return next(result);
      } else {
        return next(null, result);
      }
    });
    return this;
  },
  parseSync: function(src, opts) {
    var err, key, line, lines, match, result, value, _i, _len;

    opts || (opts = {});
    try {
      result = JSON.parse(src);
    } catch (_error) {
      err = _error;
      result = {};
      lines = src.toString().split('\n');
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        match = line.match(/^([^=:]+?)[=\:](.*)/);
        if (match) {
          key = match[1].trim();
          value = match[2].trim();
          result[key] = value;
        }
      }
    }
    return result;
  },
  stringify: function(obj, next) {
    var _this = this;

    process.nextTick(function() {
      var result;

      result = _this.stringifySync(obj);
      if (result instanceof Error) {
        return next(result);
      } else {
        return next(null, result);
      }
    });
    return this;
  },
  stringifySync: function(obj) {
    var key, line, result, value;

    result = '';
    for (key in obj) {
      if (!__hasProp.call(obj, key)) continue;
      value = obj[key];
      if (key) {
        line = key + '=' + String(value);
        result += line + '\n';
      }
    }
    return result;
  }
};

module.exports = envfile;
