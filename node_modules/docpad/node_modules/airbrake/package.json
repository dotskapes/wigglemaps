{
  "author": {
    "name": "Felix Geisend√∂rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "airbrake",
  "description": "Node.js client for airbrakeapp.com, formerly known as hoptoadapp.com.",
  "version": "0.2.9",
  "homepage": "https://github.com/felixge/node-airbrake",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-airbrake.git"
  },
  "main": "./index",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "request": "2.9.202",
    "xmlbuilder": "0.1.5",
    "stack-trace": "0.0.5",
    "hashish": "0.0.4"
  },
  "devDependencies": {
    "sinon": "1.1.1",
    "far": "0.0.4"
  },
  "optionalDependencies": {},
  "readme": "# airbrake\n\nNode.js client for [airbrakeapp.com][], formerly known as [hoptoadapp.com][].\n\n[airbrakeapp.com]: http://airbrakeapp.com/\n[hoptoadapp.com]: http://robots.thoughtbot.com/post/7665411707/hoptoad-is-now-airbrake\n\n## Install\n\n``` bash\nnpm install airbrake\n```\n\n## Basic usage\n\nThe common use case for this module is to catch all `'uncaughtException'`\nevents on the `process` object and send them to airbrake:\n\n``` javascript\nvar airbrake = require('airbrake').createClient(\"your api key\");\nairbrake.handleExceptions();\n\nthrow new Error('I am an uncaught exception');\n```\n\nPlease note that the above will re-throw the exception after it has been\nsuccessfully delivered to airbrake, caushing your process to exit with status 1.\n\nIf you want more control over the delivery of your errors, you can also\nmanually submit errors to airbrake.\n\n``` javascript\nvar airbrake = require('airbrake').createClient(\"your api key\");\nvar err = new Error('Something went terribly wrong');\nairbrake.notify(err, function(err, url) {\n  if (err) throw err;\n\n  // Error has been delivered, url links to the error in airbrake\n});\n```\n\n## Screenshot\n\nThis screenshot shows an airbrake error send from this module:\n\n![screenshot](https://github.com/felixge/node-airbrake/raw/master/screenshot.png)\n\n## Features\n\n* Automatically add `process.env` as well as other information when sending notifications\n* Detect and fix circular references in error context information\n* Support for all features of the [2.1 notification API][2.1api]\n* Support for [long-stack-traces][]\n* Optional auto-handler for `uncaughtException` events\n* Provides notification url linking to airbrake in `notify()` callback\n* Timeout airbrake requests after 30 seconds, you never know\n\n[long-stack-traces]: https://github.com/tlrobinson/long-stack-traces\n\n[2.1api]: http://help.airbrake.io/kb/api-2/notifier-api-version-21\n\n## Adding context to errors\n\nThe `notify()` method automatically adds the following context information to\neach delivered error:\n\n* **error.class:** (`err.type` string if set, or `'Error'`)\n* **error.message:** (`err.message` string)\n* **error.backtrace:** (`err.stack` as parsed by [stack-trace][])\n* **request.url:** (`err.url`, see `airbrake.url`);\n* **request.component:** (`err.component` string if set);\n* **request.action:** (`err.action` string if set);\n* **request.cgi-data:** (`process.env`, merged all other properties of `err`)\n* **request.params:** (`err.params` object if set)\n* **request.session:** (`err.session` object if set)\n* **server-environment.project-root:** (`airbrake.projectRoot` string if set)\n* **server-environment.environment-name:** (`airbrake.env` string)\n* **server-environment.app-version:** (`airbrake.appVersion string if set)\n* **server-environment.hostname:** (`airbrake.hostname` string if set)\n\nYou can add additional context information by modifying the error properties\nlisted above:\n\n``` javascript\nvar airbrake = require('airbrake').createClient(\"your api key\");\nvar http = require('http');\n\nhttp.createServer(function(req, res) {\n  if (req.headers['X-Secret'] !== 'my secret') {\n    var err = new Error('403 - Permission denied');\n    req.writeHead(403);\n    req.end(err.message);\n\n    err.url = req.url;\n    err.params = {ip: req.socket.remoteAddress};\n    airbrake.notify(err);\n  }\n});\n```\n\nUnfortunately `uncaughtException` events cannot be traced back to particular\nrequests, so you should still try to handle errors where they occur.\n\n[stack-trace]: https://github.com/felixge/node-stack-trace\n\n## Removing context from errors\n\nIn some scenarios you might want to filter some context to never show up in\nAirbrake. For example you might have a private key loaded in your environment\nmemory, or your user has some critical data in his session, and you want to\nhide that.\n\nThis can be done by hooking into the `'vars'` event like so:\n\n``` javascript\nairbrake.on('vars', function(type, vars) {\n  if (type === 'cgi-data') {\n    delete vars.SECRET;\n  }\n});\n```\n\n## Tracking deployments\n\nThis client supports airbrake's [deployment tracking][]:\n\n``` javascript\nvar airbrake = require('airbrake').createClient(\"your api key\");\nvar deployment = {\n  rev: '98103a8fa850d5eaf3666e419d8a0a93e535b1b2',\n  repo: 'git@github.com:felixge/node-airbrake.git',\n};\n\nairbrake.trackDeployment(deployment, function(err, params) {\n  if (err) {\n    throw err;\n  }\n\n  console.log('Tracked deployment of %s to %s', params.rev, params.env);\n});\n```\n\nCheck out the `airbrake.trackDeployment()` API docs below for a list of all\noptions.\n\n[deployment tracking]: http://help.airbrake.io/kb/api-2/deploy-tracking\n\n## API\n\n### Airbreak.createClient(apiKey, [env])\n\nReturns a new Airbrake instance.\n\n### airbrake.key = null\n\nThe API key to use.\n\n### airbrake.env = process.env.NODE_ENV || 'development'\n\nThe name of the server environment this is running in.\n\n### airbrake.host = 'http://' + os.hostname()\n\nThe base url for errors. If `err.url` is not set, `airbrake.host` is used\ninstead. If `err.url` is a relative url starting with `'/'`, it is appended\nto `airbrake.host`. If `err.url` is an absolute url, `airbrake.host` is ignored.\n\n### airbrake.projectRoot = null\n\nThe root directory of this project.\n\n### airbrake.appVersion = null\n\nThe version of this app. Set to a semantic version number, or leave unset.\n\n### airbrake.protocol = 'http'\n\nThe protocol to use.\n\n### airbrake.developmentEnvironments = []\n\nDo not post to Airbrake when running in these environments.\n\n### airbrake.timeout = 30 * 1000\n\nThe timeout after which to give up trying to notify airbrake in ms.\n\n### airbrake.handleExceptions()\n\nRegisters a `process.on('uncaughtException')` listener. When an uncaught\nexception occurs, the error is send to airbrake, and then re-thrown to\nkill the process.\n\n### airbrake.notify(err, [cb])\n\nSends the given `err` to airbrake.\n\nThe callback parameter receives two arguments, `err, url`. `err` is set if\nthe delivery to airbrake failed.\n\nIf no `cb` is given, and the delivery fails, an `error` event is emitted. If\nthere is no listener for this event, node will kill the process as well. This\nis done to avoid silent error delivery failure.\n\n### airbrake.trackDeployment([params, [cb]])\n\nNotifies airbrake about a deployment. `params` is an object with the following\noptions:\n\n* `env:` The environment being deployed, defaults to `airbrake.env`.\n* `user:` The user doing the deployment, defaults to `process.env.USER`.\n* `repo:` The github url of this repository. Defaults to `''`.\n* `rev:` The revision of this deployment. Defaults to `''`.\n\n## Alternative modules\n\nThis module is meant as a replacement for [hoptoad-notifier][], which does not\nsupport all features of the [2.1 API][2.1api].\n\n[hoptoad-notifier]: https://github.com/tristandunn/node-hoptoad-notifier\n\n## Contribute\n\nBesides bug fixes, I'd be happy to accept patches for:\n\n* Automatically parsing `repo` and `rev` from the local git repository when\n  calling `airbrake.trackDeployment()`. This can be done via `exec()`, but must\n  not be done when specifying `repo` / `rev` by hand, or if they are set to\n  `false`.\n\nIf you have other feature ideas, please open an issue first, so we can discuss\nit.\n\n## License\n\nairbrake is licensed under the MIT license.\n",
  "readmeFilename": "Readme.md",
  "_id": "airbrake@0.2.9",
  "_from": "airbrake@~0.2.9"
}
