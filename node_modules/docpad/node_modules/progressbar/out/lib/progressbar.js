// Generated by CoffeeScript 1.6.2
var ProgressBar, create,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ProgressBar = (function(_super) {
  __extends(ProgressBar, _super);

  ProgressBar.prototype._tick = null;

  ProgressBar.prototype._total = null;

  ProgressBar.prototype._bar = null;

  ProgressBar.prototype._step = null;

  ProgressBar.prototype._domain = null;

  function ProgressBar() {
    this.start();
  }

  ProgressBar.prototype.start = function() {
    var d,
      _this = this;

    this._tick = 0;
    this._total = 1;
    d = this._domain = require('domain').create();
    d.on('error', function(err) {});
    this.on('step', function() {
      var message, width;

      _this.destroy();
      message = "Currently on " + _this._step + " at :current/:total :percent :bar";
      width = 50;
      return d.run(function() {
        var err, progress;

        try {
          progress = require('progress');
          return _this._bar = new progress(message, {
            total: _this._total,
            width: width
          });
        } catch (_error) {
          err = _error;
          return d.emit('error', err);
        }
      });
    });
    this.on('total', function() {
      var _ref;

      return (_ref = _this._bar) != null ? _ref.total = _this._total : void 0;
    });
    return this.on('tick', function() {
      var _ref;

      return (_ref = _this._bar) != null ? _ref.tick(_this._tick - _this._bar.curr) : void 0;
    });
  };

  ProgressBar.prototype.step = function(s) {
    if (s != null) {
      return this.setStep(s);
    } else {
      return this.getStep();
    }
  };

  ProgressBar.prototype.getStep = function() {
    return this._step;
  };

  ProgressBar.prototype.setStep = function(s) {
    this._step = s;
    this.emit('step', this._step);
    this.setTick(0);
    this.setTotal(1);
    return this;
  };

  ProgressBar.prototype.total = function(t) {
    if (t != null) {
      return this.setTotal(t);
    } else {
      return this.addTotal();
    }
  };

  ProgressBar.prototype.getTotal = function() {
    return this._total;
  };

  ProgressBar.prototype.addTotal = function(t) {
    if (t == null) {
      t = 1;
    }
    this._total += t;
    this.emit('total', this._total);
    return this;
  };

  ProgressBar.prototype.setTotal = function(t) {
    this._total = t || 1;
    this.emit('total', this._total);
    return this;
  };

  ProgressBar.prototype.tick = function(t) {
    if (t != null) {
      return this.setTick(t);
    } else {
      return this.addTick();
    }
  };

  ProgressBar.prototype.getTick = function() {
    return this._tick;
  };

  ProgressBar.prototype.addTick = function(t) {
    if (t == null) {
      t = 1;
    }
    this._tick += t;
    this.emit('tick', this._tick);
    return this;
  };

  ProgressBar.prototype.setTick = function(t) {
    this._tick = t;
    this.emit('tick', this._tick);
    return this;
  };

  ProgressBar.prototype.destroy = function() {
    var d,
      _this = this;

    if (this._bar == null) {
      return this;
    }
    d = this._domain;
    d.run(function() {
      var _ref;

      return (_ref = _this._bar.rl) != null ? _ref.write(null, {
        ctrl: true,
        name: 'u'
      }) : void 0;
    });
    d.run(function() {
      var _ref;

      return (_ref = _this._bar.rl) != null ? _ref.resume() : void 0;
    });
    d.run(function() {
      var _ref;

      return (_ref = _this._bar.rl) != null ? _ref.close() : void 0;
    });
    d.run(function() {
      return _this._bar = null;
    });
    return this;
  };

  ProgressBar.prototype.finish = function() {
    var _ref;

    if (this._bar != null) {
      this.destroy();
      this.emit('finish');
    }
    if ((_ref = this._domain) != null) {
      _ref.dispose();
    }
    this.removeAllListeners();
    return this;
  };

  return ProgressBar;

})(require('events').EventEmitter);

create = function() {
  return new ProgressBar();
};

module.exports = {
  ProgressBar: ProgressBar,
  create: create
};
