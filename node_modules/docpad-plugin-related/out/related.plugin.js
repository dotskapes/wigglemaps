// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var RelatedPlugin;
  return RelatedPlugin = (function(_super) {

    __extends(RelatedPlugin, _super);

    function RelatedPlugin() {
      return RelatedPlugin.__super__.constructor.apply(this, arguments);
    }

    RelatedPlugin.prototype.name = 'related';

    RelatedPlugin.prototype.howManyItemsInside = function(aArray, bArray) {
      var aItem, bItem, count, _i, _j, _len, _len1;
      count = 0;
      for (_i = 0, _len = aArray.length; _i < _len; _i++) {
        aItem = aArray[_i];
        for (_j = 0, _len1 = bArray.length; _j < _len1; _j++) {
          bItem = bArray[_j];
          if (aItem === bItem) {
            ++count;
            break;
          }
        }
      }
      return count;
    };

    RelatedPlugin.prototype.parseAfter = function(opts, next) {
      var docpad, documents, me, seconds, startDate, targetedDocuments;
      me = this;
      docpad = this.docpad;
      documents = docpad.getCollection('documents');
      targetedDocuments = this.config.collectionName ? docpad.getCollection(this.config.collectionName) : documents;
      docpad.log('debug', 'Generating relations');
      startDate = new Date();
      targetedDocuments.forEach(function(document) {
        var relatedDocuments, tags;
        tags = document.get('tags') || [];
        relatedDocuments = documents.findAll({
          tags: {
            '$in': tags
          },
          id: {
            $ne: document.id
          }
        }).live(true).setComparator(function(a, b) {
          return me.howManyItemsInside(a, tags) < me.howManyItemsInside(b, tags);
        });
        return document.relatedDocuments = relatedDocuments;
      });
      seconds = (new Date() - startDate) / 1000;
      docpad.log('debug', require('util').format("Generated relations in %s", seconds));
      return next();
    };

    RelatedPlugin.prototype.renderBefore = function(opts, next) {
      var documents;
      documents = this.docpad.getCollection(this.config.collectionName || 'documents');
      documents.forEach(function(document) {
        var relatedDocumentsArray, _ref;
        relatedDocumentsArray = ((_ref = document.relatedDocuments) != null ? _ref.toJSON() : void 0) || [];
        return document.set({
          relatedDocuments: relatedDocumentsArray
        });
      });
      return next();
    };

    return RelatedPlugin;

  })(BasePlugin);
};
